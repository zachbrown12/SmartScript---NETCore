// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartScript_NETCore.Data;

namespace SmartScript_NETCore.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SmartScript_NETCore.Models.Chemical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Structure")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Chemicals");
                });

            modelBuilder.Entity("SmartScript_NETCore.Models.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("SmartScript_NETCore.Models.Effect", b =>
                {
                    b.Property<int>("ChemicalID")
                        .HasColumnType("int");

                    b.Property<int>("VariantID")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Medical_Effect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChemicalID", "VariantID");

                    b.HasIndex("VariantID");

                    b.ToTable("Effects");
                });

            modelBuilder.Entity("SmartScript_NETCore.Models.Ingredient", b =>
                {
                    b.Property<int>("ChemicalID")
                        .HasColumnType("int");

                    b.Property<int>("DrugID")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("ChemicalID", "DrugID");

                    b.HasIndex("DrugID");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("SmartScript_NETCore.Models.Prescription", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("DrugID")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("UserID", "DrugID");

                    b.HasIndex("DrugID");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("SmartScript_NETCore.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("File")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartScript_NETCore.Models.UserRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Chromosome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenoType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RSID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRows");
                });

            modelBuilder.Entity("SmartScript_NETCore.Models.UserVariant", b =>
                {
                    b.Property<int>("VariantID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RowNum")
                        .HasColumnType("int");

                    b.HasKey("VariantID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserVariants");
                });

            modelBuilder.Entity("SmartScript_NETCore.Models.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Allele")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Chromosome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RSID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("SmartScript_NETCore.Models.Effect", b =>
                {
                    b.HasOne("SmartScript_NETCore.Models.Chemical", "Chemical")
                        .WithMany("Effects")
                        .HasForeignKey("ChemicalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartScript_NETCore.Models.Variant", "Variant")
                        .WithMany("Effects")
                        .HasForeignKey("VariantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartScript_NETCore.Models.Ingredient", b =>
                {
                    b.HasOne("SmartScript_NETCore.Models.Chemical", "Chemical")
                        .WithMany("Ingredients")
                        .HasForeignKey("ChemicalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartScript_NETCore.Models.Drug", "Drug")
                        .WithMany("Ingredients")
                        .HasForeignKey("DrugID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartScript_NETCore.Models.Prescription", b =>
                {
                    b.HasOne("SmartScript_NETCore.Models.Drug", "Drug")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DrugID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartScript_NETCore.Models.User", "User")
                        .WithMany("Prescriptions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartScript_NETCore.Models.UserVariant", b =>
                {
                    b.HasOne("SmartScript_NETCore.Models.User", "User")
                        .WithMany("UserVariants")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartScript_NETCore.Models.Variant", "Variant")
                        .WithMany("UserVariants")
                        .HasForeignKey("VariantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
